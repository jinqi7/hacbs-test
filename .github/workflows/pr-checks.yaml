# Copyright (c) 2022 Red Hat, Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Validate PRs

on:
  pull_request:
    branches: [ main ]

jobs:
  YAML-Linter:
    runs-on: ubuntu-latest
    steps:
      - name: yaml-lint
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: .

  Dockerfile-linter:
    name: Check Dockerfiles
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          ignore: DL3003,DL3013,DL3041,DL4006  # DL4006 seems broken
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: clamav/Dockerfile
          ignore: DL3041
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: clair-in-ci/Dockerfile
          ignore: DL3041

  container_image_main:
    name: Check main image build
    runs-on: ubuntu-latest
    container:
      image: registry.fedoraproject.org/fedora:37
      options: --privileged

    steps:
      - name: Check out Docker file code in the root directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install packages
        run: |
          dnf install -y podman buildah

      - name: Build image
        uses: redhat-actions/buildah-build@v2
        with:
          image: hacbs-test
          tags: ${{ github.sha }}
          arch: amd64
          containerfiles: |
            ./Dockerfile

      - name: Selfcheck - Integration test inside the image
        run: |
          podman run --rm -t hacbs-test:${{ github.sha }} /selftest.sh


  container_image_clamdb:
    name: Check clam-db image build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            clamav:
              - 'clamav/**'

      - if: steps.changes.outputs.clamav == 'true'
        name: Install qemu dependency
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static

      - if: steps.changes.outputs.clamav == 'true'
        name: Build-image
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: clam-db
          tags: pr-test
          archs: amd64,ppc64le
          containerfiles: |
            ./clamav/Dockerfile

  container_image_clair-in-ci-db:
    name: Check clair-in-ci-db image build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            clair:
              - 'clair-in-ci/**'

      - if: steps.changes.outputs.clair == 'true'
        name: Setup docker for workflow
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - if: steps.changes.outputs.clair == 'true'
        name: Build-image
        id: build-image
        run: |
          docker build . -t clair-in-ci-db:pr-test -f ./clair-in-ci/Dockerfile

  opa_policies_unittest:
    name: opa_policies_unittest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependency packages
        run: |
         sudo apt-get install jq
         sudo curl -L -o /usr/bin/opa https://openpolicyagent.org/downloads/v0.39.0/opa_linux_amd64_static
         sudo chmod 755 /usr/bin/opa

      - name: Run unittests for policies
        run: |
         TEST_FILES="test policies unittests unittests/test_data"
         /usr/local/bin/opa test --coverage --format json $TEST_FILES | { T=`mktemp`; tee "$${T}"; /usr/local/bin/opa eval --format pretty --input "$${T}" --data hack/simplecov.rego data.simplecov.from_opa > coverage.json; rm -f "$${T}" || true ; } | jq -j -r 'if .coverage < 100 then "ERROR: Code coverage threshold not met: got \(.coverage) instead of 100.00\n" | halt_error(1) else "" end'
         pwd
         ls coverage.json

      - name: Upload test coverage report
        uses: codecov/codecov-action@v3
        if: always()

  bash_unittests:
    name: bash_unittests
    runs-on: ubuntu-latest
    steps:
      - name: Setup BATS
        uses: mig4/setup-bats@v1
        with:
          bats-version: 1.8.2

      - name: Install required packages
        run: sudo apt-get install -y jq

      - name: Check out code
        uses: actions/checkout@v3

      - name: Test
        run: bats unittests_bash

  shellcheck:
    name: Shellcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
        env:
          SHELLCHECK_OPTS: -s bash
        with:
          scandir: './test'
          ignore_paths: './test/conftest.sh ./test/selftest.sh'  # for now
